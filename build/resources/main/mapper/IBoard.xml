<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jeans.ko.Dao.IBoardDao">

    <insert id="insert">
        insert into look
        values
        (
        #{look_num},#{title},#{like},#{season},#{look_privacy},#{fk_userid_user_userid}
        ,#{memo},#{look_date},#{count},#{comment_count},#{nickname}
        )

        <selectKey resultType="java.lang.Integer" keyProperty="look_num" order="AFTER">
            <!--return 값은 dto 객체로 넘어간다 get메소드로 값을 갖고와야됨 -->
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!--룩을 등록한 후 룩에 등록된 사진들의 정보를 picture테이블에 등록한다.-->
    <!--지금은 안쓰인다. 왜냐 사진이 새로 업로드 될시 자바스크립트에서는 년월시로 동시에 올리는 데 이름이 구분이 안된다.
    이걸 구분하기 위해서 insertPicture 라는 새로운 insert문을 작성했다.
    두 차이는 이건 List를 받아 리스트를 foreach 문으로 데이터베이스에 insert 시킨는 반면 insertPicture는 그냥 insert문 하나다.-->
    <insert id="insertPicturedatabase" parameterType="java.util.ArrayList">
        <selectKey resultType="java.math.BigInteger" keyProperty="pictureId" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into picture values
        <foreach collection="list" item="i" separator=",">
            (
            #{i.pictureId},#{i.lookNum},#{i.pictureName}
            )
        </foreach>
    </insert>

    <insert id="insertPicture">
        <selectKey resultType="java.math.BigInteger" keyProperty="pictureId" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into picture(looknum, name) values (#{boardnum},#{uuidname});
    </insert>
    <!-- &lt;는 < 와 같다 게시글 6개씩 불러옴 -->
    <select id="list" resultType="jeans.ko.Dto.BoardDto">
        SELECT * FROM look WHERE look_num &lt; #{look_num} ORDER BY look_num DESC LIMIT 6;
    </select>

    <select id="searchList" resultType="jeans.ko.Dto.BoardDto">
        select *
        from look
        <include refid="search"></include>
    </select>

    <select id="preferenceList" resultType="jeans.ko.Dto.BoardDto">
        select *
        from look
        WHERE (fk_userid_user_userid=#{userid1} or fk_userid_user_userid=#{userid2} or fk_userid_user_userid=#{userid3} or fk_userid_user_userid=#{userid4} or fk_userid_user_userid=#{userid5}) AND look_num &lt; #{looknum} order by look_num desc LIMIT 6;
    </select>

    <select id="view" resultType="jeans.ko.Dto.BoardDto">
        select * from look where look_num = #{look_num}
    </select>

    <!--룩번호를 입력받아 해당되는 글의 날짜를 반환한다.-->
    <select id="getLook_date" resultType="string">
        select look_date from look where look_num=#{look_num};
    </select>

    <!--룩번호를 입력 받아 해당되는 룩에 있는 사진들의 이름을 반환한다.-->
    <select id="getallPicturename" resultType="string">
        select name from picture where looknum=#{look_num}
    </select>

    <select id="getonePicturename" resultType="string">
        select name from picture where looknum=#{look_num} limit 1
    </select>

    <!--ID를 이용하여 해당 ID를 사용하는 유저가 쓴 글들을 반환한다.-->
    <select id="getLooksforId" resultType="jeans.ko.Dto.BoardDto">
        select * from look where fk_userid_user_userid=#{fk_userid_user_userid} order by look_num desc
    </select>

    <select id="getBoardnum" resultType="int">
        select count(*) from look where nickname= #{nickname}
    </select>

    <delete id="delete">
        delete from look where look_num= #{look_num}
    </delete>

    <delete id="deleteAllpictures">
        delete from picture where looknum=#{look_num}
    </delete>

    <update id="countUpdate">
        update look set count = count + 1 where look_num = #{look_num}
    </update>

    <update id="update">
        update look set title = #{title},season = #{season},
        look_privacy = #{look_privacy},memo = #{memo}
       where look_num = #{look_num}
    </update>

    <sql id="search">
        <choose>
            <when test="option=='all'">
                WHERE (nickname like CONCAT('%',#{keyword},'%') OR memo like CONCAT('%',#{keyword},'%') OR title like CONCAT('%',#{keyword},'%')) AND look_num &lt; #{looknum} order by look_num desc LIMIT 6;
            </when>
            <otherwise>
                WHERE ${option} like CONCAT('%',#{keyword},'%') AND look_num &lt; #{looknum} order by look_num desc LIMIT 6;
            </otherwise>
        </choose>
    </sql>

</mapper>